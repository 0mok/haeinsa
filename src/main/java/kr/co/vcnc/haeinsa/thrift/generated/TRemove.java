/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package kr.co.vcnc.haeinsa.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TRemove implements org.apache.thrift.TBase<TRemove, TRemove._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRemove");

  private static final org.apache.thrift.protocol.TField REMOVE_CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("removeCells", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REMOVE_FAMILIES_FIELD_DESC = new org.apache.thrift.protocol.TField("removeFamilies", org.apache.thrift.protocol.TType.LIST, (short)2);

  public List<TCellKey> removeCells;
  public List<ByteBuffer> removeFamilies;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REMOVE_CELLS((short)1, "removeCells"),
    REMOVE_FAMILIES((short)2, "removeFamilies");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REMOVE_CELLS
          return REMOVE_CELLS;
        case 2: // REMOVE_FAMILIES
          return REMOVE_FAMILIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REMOVE_CELLS, new org.apache.thrift.meta_data.FieldMetaData("removeCells", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCellKey.class))));
    tmpMap.put(_Fields.REMOVE_FAMILIES, new org.apache.thrift.meta_data.FieldMetaData("removeFamilies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRemove.class, metaDataMap);
  }

  public TRemove() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRemove(TRemove other) {
    if (other.isSetRemoveCells()) {
      List<TCellKey> __this__removeCells = new ArrayList<TCellKey>();
      for (TCellKey other_element : other.removeCells) {
        __this__removeCells.add(new TCellKey(other_element));
      }
      this.removeCells = __this__removeCells;
    }
    if (other.isSetRemoveFamilies()) {
      List<ByteBuffer> __this__removeFamilies = new ArrayList<ByteBuffer>();
      for (ByteBuffer other_element : other.removeFamilies) {
        ByteBuffer temp_binary_element = org.apache.thrift.TBaseHelper.copyBinary(other_element);
;
        __this__removeFamilies.add(temp_binary_element);
      }
      this.removeFamilies = __this__removeFamilies;
    }
  }

  public TRemove deepCopy() {
    return new TRemove(this);
  }

  @Override
  public void clear() {
    this.removeCells = null;
    this.removeFamilies = null;
  }

  public int getRemoveCellsSize() {
    return (this.removeCells == null) ? 0 : this.removeCells.size();
  }

  public java.util.Iterator<TCellKey> getRemoveCellsIterator() {
    return (this.removeCells == null) ? null : this.removeCells.iterator();
  }

  public void addToRemoveCells(TCellKey elem) {
    if (this.removeCells == null) {
      this.removeCells = new ArrayList<TCellKey>();
    }
    this.removeCells.add(elem);
  }

  public List<TCellKey> getRemoveCells() {
    return this.removeCells;
  }

  public TRemove setRemoveCells(List<TCellKey> removeCells) {
    this.removeCells = removeCells;
    return this;
  }

  public void unsetRemoveCells() {
    this.removeCells = null;
  }

  /** Returns true if field removeCells is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoveCells() {
    return this.removeCells != null;
  }

  public void setRemoveCellsIsSet(boolean value) {
    if (!value) {
      this.removeCells = null;
    }
  }

  public int getRemoveFamiliesSize() {
    return (this.removeFamilies == null) ? 0 : this.removeFamilies.size();
  }

  public java.util.Iterator<ByteBuffer> getRemoveFamiliesIterator() {
    return (this.removeFamilies == null) ? null : this.removeFamilies.iterator();
  }

  public void addToRemoveFamilies(ByteBuffer elem) {
    if (this.removeFamilies == null) {
      this.removeFamilies = new ArrayList<ByteBuffer>();
    }
    this.removeFamilies.add(elem);
  }

  public List<ByteBuffer> getRemoveFamilies() {
    return this.removeFamilies;
  }

  public TRemove setRemoveFamilies(List<ByteBuffer> removeFamilies) {
    this.removeFamilies = removeFamilies;
    return this;
  }

  public void unsetRemoveFamilies() {
    this.removeFamilies = null;
  }

  /** Returns true if field removeFamilies is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoveFamilies() {
    return this.removeFamilies != null;
  }

  public void setRemoveFamiliesIsSet(boolean value) {
    if (!value) {
      this.removeFamilies = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REMOVE_CELLS:
      if (value == null) {
        unsetRemoveCells();
      } else {
        setRemoveCells((List<TCellKey>)value);
      }
      break;

    case REMOVE_FAMILIES:
      if (value == null) {
        unsetRemoveFamilies();
      } else {
        setRemoveFamilies((List<ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REMOVE_CELLS:
      return getRemoveCells();

    case REMOVE_FAMILIES:
      return getRemoveFamilies();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REMOVE_CELLS:
      return isSetRemoveCells();
    case REMOVE_FAMILIES:
      return isSetRemoveFamilies();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRemove)
      return this.equals((TRemove)that);
    return false;
  }

  public boolean equals(TRemove that) {
    if (that == null)
      return false;

    boolean this_present_removeCells = true && this.isSetRemoveCells();
    boolean that_present_removeCells = true && that.isSetRemoveCells();
    if (this_present_removeCells || that_present_removeCells) {
      if (!(this_present_removeCells && that_present_removeCells))
        return false;
      if (!this.removeCells.equals(that.removeCells))
        return false;
    }

    boolean this_present_removeFamilies = true && this.isSetRemoveFamilies();
    boolean that_present_removeFamilies = true && that.isSetRemoveFamilies();
    if (this_present_removeFamilies || that_present_removeFamilies) {
      if (!(this_present_removeFamilies && that_present_removeFamilies))
        return false;
      if (!this.removeFamilies.equals(that.removeFamilies))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TRemove other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TRemove typedOther = (TRemove)other;

    lastComparison = Boolean.valueOf(isSetRemoveCells()).compareTo(typedOther.isSetRemoveCells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoveCells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removeCells, typedOther.removeCells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoveFamilies()).compareTo(typedOther.isSetRemoveFamilies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoveFamilies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removeFamilies, typedOther.removeFamilies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REMOVE_CELLS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
              this.removeCells = new ArrayList<TCellKey>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                TCellKey _elem6;
                _elem6 = new TCellKey();
                _elem6.read(iprot);
                this.removeCells.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REMOVE_FAMILIES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
              this.removeFamilies = new ArrayList<ByteBuffer>(_list7.size);
              for (int _i8 = 0; _i8 < _list7.size; ++_i8)
              {
                ByteBuffer _elem9;
                _elem9 = iprot.readBinary();
                this.removeFamilies.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.removeCells != null) {
      if (isSetRemoveCells()) {
        oprot.writeFieldBegin(REMOVE_CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.removeCells.size()));
          for (TCellKey _iter10 : this.removeCells)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.removeFamilies != null) {
      if (isSetRemoveFamilies()) {
        oprot.writeFieldBegin(REMOVE_FAMILIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.removeFamilies.size()));
          for (ByteBuffer _iter11 : this.removeFamilies)
          {
            oprot.writeBinary(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRemove(");
    boolean first = true;

    if (isSetRemoveCells()) {
      sb.append("removeCells:");
      if (this.removeCells == null) {
        sb.append("null");
      } else {
        sb.append(this.removeCells);
      }
      first = false;
    }
    if (isSetRemoveFamilies()) {
      if (!first) sb.append(", ");
      sb.append("removeFamilies:");
      if (this.removeFamilies == null) {
        sb.append("null");
      } else {
        sb.append(this.removeFamilies);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

